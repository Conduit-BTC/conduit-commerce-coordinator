import medusaToNostrProduct from "@/utils/medusaProductToNostrProduct";
import { getNdk } from "@/utils/NdkService"
import {
    createStep, StepResponse
} from "@medusajs/framework/workflows-sdk"
import { Product } from ".medusa/types/remote-query-entry-points";
import { NDKEvent } from "@nostr-dev-kit/ndk";
import { NOSTR_EVENTS_MODULE } from "@/modules/nostr-events";
import type NostrEventsModuleService from "@/modules/nostr-events/service";

export type WorkflowInput = {
    product: Product
}

export type StoreProductEventStepInput = {
    nostrEvent: any,
    medusaProductId: string,
}

export const createProductEventStep = createStep(
    "create-product-event",
    async ({ product }: WorkflowInput) => {
        const nostrProduct = medusaToNostrProduct(product, "coffee-by-conduit-btc");
        const ndk = await getNdk();
        const ndkEvent = new NDKEvent(ndk);
        ndkEvent.kind = 30018;
        ndkEvent.content = JSON.stringify(nostrProduct.content);
        ndkEvent.tags = nostrProduct.tags;

        await ndkEvent.sign();

        const eventData = {
            id: ndkEvent.id,
            pubkey: ndkEvent.pubkey,
            created_at: ndkEvent.created_at,
            kind: ndkEvent.kind,
            content: ndkEvent.content,
            tags: ndkEvent.tags,
            sig: ndkEvent.sig
        }

        return new StepResponse(eventData)
    }
)

export const updateProductEventStep = createStep(
    "update-product-event",
    async ({ nostrEvent, medusaProductId }: StoreProductEventStepInput, { container }): Promise<any> => {
        const nostrEventsModuleService: NostrEventsModuleService = container.resolve(NOSTR_EVENTS_MODULE);
        const eventData = {
            id: nostrEvent.id,
            medusaProductId,
            pubkey: nostrEvent.pubkey,
            created_at: nostrEvent.created_at,
            kind: nostrEvent.kind,
            content: nostrEvent.content,
            tags: nostrEvent.tags,
            sig: nostrEvent.sig,
            nostrEvent: {
                ...nostrEvent
            }
        };

        const storedEvent = await nostrEventsModuleService.updateProductNostrEvents(eventData);

        return new StepResponse(storedEvent)
    },
)

export const storeProductEventStep = createStep(
    "store-product-event",
    async ({ nostrEvent, medusaProductId }: StoreProductEventStepInput, { container }): Promise<any> => {
        const nostrEventsModuleService: NostrEventsModuleService = container.resolve(NOSTR_EVENTS_MODULE);
        const eventData = {
            id: nostrEvent.id,
            medusaProductId,
            pubkey: nostrEvent.pubkey,
            created_at: nostrEvent.created_at,
            kind: nostrEvent.kind,
            content: nostrEvent.content,
            tags: nostrEvent.tags,
            sig: nostrEvent.sig,
            nostrEvent: {
                ...nostrEvent
            }
        };

        const storedEvent = await nostrEventsModuleService.createProductNostrEvents(eventData)

        return new StepResponse(storedEvent)
    },
    async (nostrEvent: any, { container }) => {
        const nostrEventsModuleService: NostrEventsModuleService = container.resolve(NOSTR_EVENTS_MODULE);
        await nostrEventsModuleService.deleteProductNostrEvents(nostrEvent.id);
    }
)

export const broadcastProductEventStep = createStep(
    "broadcast-product-event-to-relay",
    async (nostrEvent: any) => {
        try {
            const ndk = await getNdk();
            const event = new NDKEvent(ndk, nostrEvent)
            const publishPromise = event.publish();
            const relays = await Promise.race([
                publishPromise,
                new Promise((_, reject) =>
                    setTimeout(() => reject(new Error('Publish timeout')), 5000)
                )
            ]);

            return new StepResponse(relays)
        } catch (error) {
            console.error('Failed to publish:', error);
            throw error;
        }
    }
)

export const broadcastDeletionRequestStep = createStep(
    "broadcast-event-delete",
    async (id: string, { container }) => {
        const nostrEventsModuleService: NostrEventsModuleService = container.resolve(NOSTR_EVENTS_MODULE);
        const { id: eventId } = await nostrEventsModuleService.retrieveProductNostrEvent(id);
        const ndk = await getNdk();
        const deleteRequestEvent = new NDKEvent(ndk);
        deleteRequestEvent.kind = 5;
        deleteRequestEvent.tags = [["e", eventId], ["k", "30018"]];
        deleteRequestEvent.content = "[Conduit Commerce Coordinator] - This Product deletion request has been generated by the Merchant via their instance of Conduit Commerce Coordinator. Please remove this product from the relay immediately.";

        await deleteRequestEvent.sign();

        const publishPromise = deleteRequestEvent.publish();

        await Promise.race([
            publishPromise,
            new Promise((_, reject) =>
                setTimeout(() => reject(new Error('Publish timeout')), 5000)
            )
        ]);


        return new StepResponse();
    },
)

export const deleteProductEventStep = createStep(
    "delete-event-from-database",
    async (productId: string, { container }) => {
        const nostrEventsModuleService: NostrEventsModuleService = container.resolve(NOSTR_EVENTS_MODULE);

        try {
            await nostrEventsModuleService.deleteProductNostrEvents(productId);
        } catch (e) {
            console.error("Failed to delete Product event from database", e);
        }

        return new StepResponse();
    }
)
